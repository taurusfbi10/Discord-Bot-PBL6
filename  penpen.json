{"Information of Host":"Host: zero.webappsecurity.com via IP address: 54.82.22.214","vul_scanner_report":[[1,"Modern Web Application","Informational",0,"-1","(5 URLs) http://zero.webappsecurity.com/resources/js/jquery-1.8.2.min.js","The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.","This is an informational alert and so no changes are required.","ZAP"],[2,"Information Disclosure - Suspicious Comments","Informational",0,"200","(3 URLs) http://zero.webappsecurity.com/resources/js/jquery-1.8.2.min.js","The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.","Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.","ZAP"],[3,"User Agent Fuzzer","Informational",0,"0","(4 URLs) http://zero.webappsecurity.com/resources/css","Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.","","ZAP"],[4,"Server Leaks Version Information via \"Server\" HTTP Response Header Field","Low",2,"200","(23 URLs) http://zero.webappsecurity.com/resources/css/font-awesome.css","The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.","Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.","ZAP"],[5,"X-Content-Type-Options Header Missing","Low",2,"693","(13 URLs) http://zero.webappsecurity.com/resources/js/jquery-1.8.2.min.js","The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.","Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.","ZAP"],[6,"Missing Anti-clickjacking Header","Medium",5.49,"1021","(4 URLs) http://zero.webappsecurity.com/","The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.","Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.","ZAP"],[7,"Content Security Policy (CSP) Header Not Set","Medium",5.49,"693","(10 URLs) http://zero.webappsecurity.com/robots.txt","Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.","Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header, to achieve optimal browser support: \"Content-Security-Policy\" for Chrome 25+, Firefox 23+ and Safari 7+, \"X-Content-Security-Policy\" for Firefox 4.0+ and Internet Explorer 10+, and \"X-WebKit-CSP\" for Chrome 14+ and Safari 6+.","ZAP"],[8,"Cross-Domain Misconfiguration","Medium",5.49,"264","(23 URLs) http://zero.webappsecurity.com/resources/css/font-awesome.css","Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server","Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.","ZAP"],[9,"Absence of Anti-CSRF Tokens","Medium",5.49,"352","(4 URLs) http://zero.webappsecurity.com/","No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.","Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.","ZAP"],[10,"Vulnerable JS Library","Medium",5.49,"829","(1 URLs) http://zero.webappsecurity.com/resources/js/jquery-1.8.2.min.js","The identified library jquery, version 1.8.2 is vulnerable.","Please upgrade to the latest version of jquery.","ZAP"],[11,"Hidden File Found","Medium",5.49,"538","(1 URLs) http://zero.webappsecurity.com/server-status","A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts.","Consider whether or not the component is actually required in production, if it isn't then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.","ZAP"]]}