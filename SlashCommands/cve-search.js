const {ChatInputCommandInteraction, SlashCommandBuilder, EmbedBuilder} = require('discord.js');
require('dotenv').config();

module.exports = {
   category: 'CVE Search',
   data: new SlashCommandBuilder()
      .setName('cve-search')
      .setDescription('CVE Search')
      .addStringOption(options => options
         .setName('url')
         .setDescription('URL to scan')
         .setRequired(true)
      
         )
      .addStringOption(options1 => options1
         .setName('name')
         .setDescription('Name to save')
         .setRequired(true)
      
         ),
         /**
          * @param {ChatInputCommandInteraction} interaction
          * @param {Client} client
          */
         async execute(interaction, client) {
            try {
               const url = interaction.options.getString('url');
               const name = interaction.options.getString('name');
            let settings = { method: "Get" };
            
            await interaction.reply({
               content: 'Please wait...'
            })

            const cve = await fetch('http://xeusnguyen.ddns.net:50000/apiv1/robust_scanner/cve_search?domain='+url+'&db=True&sN='+name+'&save=True', settings)
        .then(res => res.json())

        const CVEEmbed = new EmbedBuilder()
         .setColor('#0099ff')
         .setTitle('Robust Scanner')
         .setURL('http://xeusnguyen.ddns.net:50000/apiv1/robust_scanner/get_report?name='+name)
         .setDescription(cve["Information of Host"])
         .setFooter({text: 'Xeus and G', iconURL: 'https://avatars.githubusercontent.com/u/74602538?v=4'})
         .setTimestamp();

         try {
            if(cve['CVE report'].length > 0){
                for(let i = 0; i < cve['CVE report'].length; i++)
                {
                            CVEEmbed.addFields([
                                { name: "ID",  value: cve['CVE report'][i]['CVE_ID'], inline: true },
                                { name: "URL",  value: cve['CVE report'][i]['URL of CVE'], inline: true },
                                { name: "Solution",  value: cve['CVE report'][i]['Package of Tech'], inline: true }])
                }
            }
        } catch (error) {
            // CVEEmbed.addFields([
            //     { name: "ID",  value: 'None', inline: true },
            //     { name: "URL",  value: 'None', inline: true },
            //     { name: "Solution",  value: 'None', inline: true }])
        }

        return await interaction.editReply({
         content: '',
            embeds: [CVEEmbed],
        })
            } catch (err) {
               console.log(err);
               return await interaction.reply({
                  embeds: [
                     new EmbedBuilder()
                        .setDescription('An error occurred!')
                  ],
                  ephemeral: true,
               })
            }
         }

}